ARG lnd_version=v0.14.1-beta

ARG balanceofsatoshis_tag=v11.32.0
ARG charge_lnd_tag=v0.2.8
ARG csview_tag=v1.0.0-rc.1
ARG dog_commit=721440b
ARG gping_tag=gping-v1.2.7
ARG igniter_tag=1.0.0
ARG lntop_tag=v0.3.0
ARG oha_tag=v0.5.0
ARG perfectly_balanced_tag=v0.0.10
ARG rebalance_lnd_tag=v2.2
ARG sc_im_tag=v0.8.2
ARG suez_commit=335d430

ARG lws_tag=v4.3.0
ARG ttyd_commit=45f7b4e

FROM golang:1.17-${DEBIAN_VERSION} AS golang-builder

ARG arch

WORKDIR /build

RUN apt-get update \
    && apt-get install -y bison build-essential cmake curl git gnupg libjson-c-dev libncurses-dev libwebsockets-dev pkg-config \
    && apt clean all

# getting lnd
ARG lnd_version
RUN curl -sSL -o /build/lnd-linux-${arch}-${lnd_version}.tar.gz https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/lnd-linux-${arch}-${lnd_version}.tar.gz
RUN curl -sSL -o /build/manifest-guggero-${lnd_version}.sig https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-guggero-${lnd_version}.sig
RUN curl -sSL -o /build/manifest-${lnd_version}.txt https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-${lnd_version}.txt
RUN curl https://raw.githubusercontent.com/lightningnetwork/lnd/master/scripts/keys/guggero.asc | gpg --import
RUN cd /build && gpg --verify manifest-guggero-${lnd_version}.sig manifest-${lnd_version}.txt && tar xzf lnd-linux-${arch}-${lnd_version}.tar.gz && mv lnd-linux-${arch}-${lnd_version} /lnd

# building lntop
ARG lntop_tag
RUN cd /build && git clone --depth 1 --branch ${lntop_tag} https://github.com/edouardparis/lntop.git
ENV GOARCH=${arch}
ENV GOOS=linux
RUN cd /build/lntop && mkdir bin && go build -o bin/lntop cmd/lntop/main.go

# building sc-im
ARG sc_im_tag
RUN cd /build && git clone --depth 1 --branch ${sc_im_tag} https://github.com/andmarti1424/sc-im.git
RUN cd /build/sc-im/src && make

# building ttyd (+lws)
ARG lws_tag
RUN cd /build && git clone --depth 1 --branch ${lws_tag} https://libwebsockets.org/repo/libwebsockets
RUN cd /build/libwebsockets && mkdir build && cd build && cmake .. -DLWS_WITH_LIBUV=ON && make && make install

ARG ttyd_commit
RUN cd /build && git clone https://github.com/tsl0922/ttyd.git && cd ttyd && git checkout ${ttyd_commit}
RUN cd /build/ttyd && mkdir build && cmake . && make

# VERSION_SPECIFIC_BUILD_STEPS

FROM rustlang/rust:nightly-${DEBIAN_VERSION}-slim AS rust-builder

RUN apt-get update \
    && apt-get install -y git gzip libssl-dev pandoc pkg-config \
    && apt clean all

WORKDIR /build

ARG csview_tag
RUN cd /build && git clone --depth 1 --branch ${csview_tag} https://github.com/wfxr/csview.git
RUN cd /build/csview && cargo build --release

ARG dog_commit
RUN cd /build && git clone https://github.com/ogham/dog.git && cd dog && git checkout ${dog_commit}
RUN cd /build/dog && cargo build --release
RUN pandoc /build/dog/man/dog.1.md -s -t man | gzip > /build/dog/man/dog.1.gz

ARG gping_tag
RUN cd /build && git clone --depth 1 --branch ${gping_tag} https://github.com/orf/gping.git
RUN cd /build/gping && cargo build --release

ARG oha_tag
RUN cd /build && git clone --depth 1 --branch ${oha_tag} https://github.com/hatoo/oha.git
RUN cd /build/oha && cargo build --release

FROM node:16-${DEBIAN_VERSION}-slim

ARG balanceofsatoshis_tag
RUN npm i -g balanceofsatoshis@${balanceofsatoshis_tag}

RUN echo "deb http://deb.debian.org/debian ${DEBIAN_VERSION}-backports main" | tee -a /etc/apt/sources.list

RUN apt update \
    && apt upgrade -y \
    && apt install -y --no-install-recommends bc ca-certificates curl git iputils-ping jq libc6 libcap2 libssl1.1 libuv1 links micro nano procps python3 python3-pip python3-venv python3-wheel screen sysstat tini tmux vim zlib1g <VERSION_SPECIFIC_DEPENDENCIES> \
    && apt clean all \
    && rm -rf /var/lib/apt/lists/*

ARG charge_lnd_tag
RUN git clone --depth 1 --branch ${charge_lnd_tag} https://github.com/accumulator/charge-lnd.git /charge-lnd
RUN cd /charge-lnd && <INSTALL_MAYBE_NO_GRPC>
RUN cd /charge-lnd && python3 setup.py install
RUN rm -rf /charge-lnd

ARG igniter_tag
RUN git clone --depth 1 --branch ${igniter_tag} https://github.com/RooSoft/igniter.git /igniter
RUN chmod +x /igniter/igniter.sh

ARG perfectly_balanced_tag
RUN git clone --depth 1 --branch ${perfectly_balanced_tag} https://github.com/cuaritas/perfectly-balanced.git /perfectly-balanced
RUN chmod +x /perfectly-balanced/perfectlybalanced.sh

ARG rebalance_lnd_tag
RUN git clone --depth 1 --branch ${rebalance_lnd_tag} https://github.com/C-Otto/rebalance-lnd.git /rebalance-lnd
RUN cd /rebalance-lnd && <INSTALL_MAYBE_NO_GRPC>

# extracting and installing suez requirements
ARG suez_commit
RUN curl -sSL https://install.python-poetry.org | python3 -
RUN git clone https://github.com/prusnak/suez.git /suez && cd /suez && git checkout ${suez_commit}
RUN cd /suez && /root/.local/bin/poetry export -f requirements.txt --output requirements.txt --without-hashes
RUN pip3 install -r /suez/requirements.txt

COPY --from=golang-builder /lnd/lncli /bin/
COPY --from=golang-builder /build/lntop/bin/lntop /bin/
COPY --from=golang-builder /build/sc-im/src/sc-im /usr/bin/
COPY --from=golang-builder /build/sc-im/src/scopen /usr/bin/
COPY --from=golang-builder /build/sc-im/src/sc-im.1 /usr/share/man/man1/
COPY --from=golang-builder /usr/local/lib/libwebsockets.so /usr/local/lib/
COPY --from=golang-builder /usr/local/lib/libwebsockets.so.19 /usr/local/lib/
COPY --from=golang-builder /usr/local/lib/libwebsockets-evlib_uv.so /usr/local/lib/
ENV LD_LIBRARY_PATH /usr/local/lib/
COPY --from=golang-builder /build/ttyd /usr/bin/

COPY --from=rust-builder /build/csview/target/release/csview /bin/
COPY --from=rust-builder /build/dog/target/release/dog /bin/
COPY --from=rust-builder /build/dog/man/dog.1.gz /usr/share/man/man1/
COPY --from=rust-builder /build/gping/target/release/gping /bin/
COPY --from=rust-builder /build/oha/target/release/oha /bin/

# VERSION_SPECIFIC_COPY_STEPS

COPY motd /etc/motd

# The node container already has an user called node, rename it
RUN groupmod --new-name lnshell node && usermod --login lnshell --move-home --home /home/lnshell node

USER lnshell
WORKDIR /home/lnshell

ARG version
RUN mkdir -p /home/lnshell/.local/bin
COPY --chown=lnshell:lnshell bin/* /home/lnshell/.local/bin/
RUN cd /home/lnshell/.local/bin/ && chmod +x *
RUN echo "PATH=~/.local/bin:$PATH; export PATH" >> /home/lnshell/.bashrc
RUN echo "cat /etc/motd" >> /home/lnshell/.bashrc
RUN echo "${version}" > /home/lnshell/.lnshell-version

EXPOSE 7681

ENV APP_PASSWORD=

ENV USERNAME=umbrel

ENTRYPOINT /usr/bin/tini /usr/bin/ttyd -- --credential ${USERNAME}:${APP_PASSWORD} bash
